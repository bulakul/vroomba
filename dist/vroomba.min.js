/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/vroomba.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./app/gameObject.js":
/*!***************************!*\
  !*** ./app/gameObject.js ***!
  \***************************/
/*! exports provided: groundPlane, sky */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"groundPlane\", function() { return groundPlane; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sky\", function() { return sky; });\nfunction groundPlane() {\n    const el = document.createElement('a-plane');\n    el.setAttribute('static-body', {});\n    el.setAttribute('width', 30);\n    el.setAttribute('height', 30);\n    el.setAttribute('color', '#7BC8A4');\n    el.object3D.position.set(0, 0, 0);\n    el.object3D.rotation.x = THREE.Math.degToRad(-90);\n    return el;\n}\n\nfunction sky() {\n    const el = document.createElement('a-sky');\n    el.setAttribute('color', '#ECECEC');\n    return el;\n}\n\n//# sourceURL=webpack:///./app/gameObject.js?");

/***/ }),

/***/ "./app/gameState.js":
/*!**************************!*\
  !*** ./app/gameState.js ***!
  \**************************/
/*! exports provided: gameState */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"gameState\", function() { return gameState; });\nfunction gameState() {\n    return {\n        playerHealth: 50,\n        numEnemiesInLevel: 10,\n        totalEnemiesDefeated: 0,\n        currentLevel: 1,\n        endLevel: 3,\n        enemyIds: [],\n        levelMap: {\n            1: {\n                enemiesDefeated: 0,\n                totalEnemies: 2,\n            },\n            2: {\n                enemiesDefeated: 0,\n                totalEnemies: 3,\n            },\n            3: {\n                enemiesDefeated: 0,\n                totalEnemies: 4,\n            },\n        }\n    };\n};\n\n\n//# sourceURL=webpack:///./app/gameState.js?");

/***/ }),

/***/ "./src/vroomba.js":
/*!************************!*\
  !*** ./src/vroomba.js ***!
  \************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _app_gameState_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../app/gameState.js */ \"./app/gameState.js\");\n/* harmony import */ var _app_gameObject_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../app/gameObject.js */ \"./app/gameObject.js\");\n\n\n\nAFRAME.registerState({\n    initialState: Object(_app_gameState_js__WEBPACK_IMPORTED_MODULE_0__[\"gameState\"])(),\n\n    handlers: {\n        enemyCreated: function(state, action){\n            let enemyId = action.enemyId;\n            state.enemyIds.push(enemyId);\n        },\n        entityHit: function(state, action){\n            let systems = AFRAME.scenes[0].systems;\n            let entityId = action.entityId;\n            if (entityId == null || !entityId.startsWith(\"MM_\")){\n                //TODO: handle non-enemy hit (weapon switched)\n                if (entityId == \"pull\" || entityId == \"push\" || entityId == \"areaOfEffect\" || entityId == \"sniper\"){\n                    AFRAME.scenes[0].emit('weaponChanged', {effect: entityId});\n                }\n                return;\n            }\n            let enemyId = entityId;\n            let enemyEl = document.querySelector('#' + enemyId);\n            let player = document.querySelector('#player');\n            if (enemyEl) {\n                systems.weapon.doEffect(player, enemyEl, state.enemyIds);\n                systems.weapon.dealDamage(player, enemyEl, state.enemyIds);\n            }\n        },\n        enemyDefeated: function(state, action){\n            state.enemiesDefeated += 1;\n            if (!(state.currentLevel > state.endLevel)) {\n                state.levelMap[state.currentLevel].enemiesDefeated += 1;\n                let levelObj = state.levelMap[state.currentLevel];\n                if (levelObj.enemiesDefeated >= levelObj.totalEnemies) {\n                    state.currentLevel += 1;\n                    AFRAME.scenes[0].systems.hudUpdate.updateLevel(state.currentLevel);\n                }\n            }\n        },\n        playerHit: function(state, action){\n            let damage = action.damage;\n            state.playerHealth -= damage;\n            if (state.playerHealth < 0){\n                // TODO: player dead, game over\n            }\n        },\n        weaponChanged: function(state, action){\n            AFRAME.scenes[0].systems.weapon.weaponChanged(action.effect);\n        }\n    }\n});\n\nAFRAME.registerComponent('vroomba-scene-setup', {\n    init() {\n        // Attach objects to global scene\n        const sceneEl = document.querySelector('a-scene');\n\n        sceneEl.appendChild(Object(_app_gameObject_js__WEBPACK_IMPORTED_MODULE_1__[\"sky\"])());\n        sceneEl.appendChild(Object(_app_gameObject_js__WEBPACK_IMPORTED_MODULE_1__[\"groundPlane\"])());\n\n        window.onkeyup = function(e) {\n            if (e.key == 1){\n                sceneEl.emit('enemyHit', {enemyId: 0, damage: 10});\n            } else if (e.key == 2){\n                sceneEl.emit('enemyDefeated', {});\n            } else if (e.key == 3){\n                sceneEl.emit('playerHit', {damage: 5});\n            } else if (e.key == 4){\n                sceneEl.emit('weaponChanged', {effect: \"pull\"});\n            } else if (e.key == 5){\n                sceneEl.emit('weaponChanged', {effect: \"push\"});\n            } else if (e.key == 6){\n                sceneEl.emit('weaponChanged', {effect: \"areaOfEffect\"});\n            } else if (e.key == 7){\n                sceneEl.emit('weaponChanged', {effect: \"sniper\"});\n            } else if (e.key == 8){\n                sceneEl.emit('weaponChanged', {effect: \"normal\"});\n            }\n        };\n    }\n});\n\nAFRAME.registerSystem('hudUpdate', {\n\n    updateLevel: function(level){\n        document.querySelector('#levelLabel').setAttribute('text', {value: \"Level \" + level});\n    }\n\n});\n\nAFRAME.registerSystem('weapon', {\n    schema: {\n        effect: { type: 'string', default: 'normal'},\n        damage: { type: 'number', default: 10}\n    },\n\n    init: function () {\n\n    },\n\n    tick: function () {\n    },\n\n    weaponChanged: function ( weaponEffect ) {\n      this.data.effect = weaponEffect;\n\n      let weapon = document.querySelector('#weapon');\n      console.log(weapon);\n      if (weaponEffect == \"pull\"){\n          weapon.setAttribute('material', {color: 'purple'});\n      } else if (weaponEffect == \"push\") {\n          weapon.setAttribute('material', {color: 'orange'});\n      } else if (weaponEffect == \"areaOfEffect\"){\n          weapon.setAttribute('material', {color: 'red'});\n      } else if (weaponEffect == \"sniper\"){\n          weapon.setAttribute('material', {color: 'blue'});\n      } else if (weaponEffect == \"normal\"){\n          weapon.setAttribute('material', {color: 'grey'});\n      }\n    },\n\n    getDamage: function() {\n        return this.data.damage;\n    },\n\n    doEffect: function(player, target, enemyIds){\n        if (this.data.effect == \"pull\"){\n            this.moveMonstersToTarget(target, enemyIds);\n        } else if (this.data.effect == \"push\") {\n            this.blastMonstersAwayFromTarget(player, target, enemyIds);\n        }\n    },\n\n    dealDamage: function(player, target, enemyIds){\n        if (this.data.effect == \"normal\") {\n            this.el.sceneEl.systems.monster.onHit(target, this.data.damage);\n        } else if (this.data.effect == \"areaOfEffect\"){\n            let nearbyEnemies = this.getMonstersWithinDistanceOfTarget(target, enemyIds, 2);\n            for (let i = 0; i < nearbyEnemies.length; i++){\n                let enemy = nearbyEnemies[i];\n                this.el.sceneEl.systems.monster.onHit(enemy, this.data.damage/2);\n            }\n            this.el.sceneEl.systems.monster.onHit(target, this.data.damage);\n        } else if (this.data.effect == \"sniper\"){\n            let nearbyEnemies = this.getMonstersWithinDistanceOfTarget(target, enemyIds, 1);\n            console.log(nearbyEnemies);\n            if (nearbyEnemies.length == 0){\n                this.el.sceneEl.systems.monster.onHit(target, this.data.damage*2);\n            } else {\n                this.el.sceneEl.systems.monster.onHit(target, this.data.damage/2);\n            }\n        }\n    },\n\n    moveMonstersToTarget: function( target, monsterIds ){\n        let targetPosition = target.getAttribute('position');\n        console.log(targetPosition);\n        for (let i = 0; i < monsterIds.length; i++){\n            var id = monsterIds[i];\n            if (id == target.id){\n                continue;\n            }\n            var el = document.querySelector('#' + id);\n            if (el != null) {\n                var newPos = {\n                    x: targetPosition.x + ((Math.random() * 0.8) + -0.8),\n                    y: targetPosition.y,\n                    z: targetPosition.z + ((Math.random() * 0.8) + -0.8),\n                };\n                el.setAttribute('animation', 'property: position; to: ' + newPos.x + \" \" + newPos.y  + \" \" + newPos.z);\n            }\n        }\n    },\n\n    blastMonstersAwayFromTarget: function( player, target, monsterIds ){\n        let playerPosition = player.getAttribute('position');\n        let targetPosition = target.getAttribute('position');\n        for (let i = 0; i < monsterIds.length; i++){\n            var id = monsterIds[i];\n            if (id == player.id){\n                continue;\n            }\n            var el = document.querySelector('#' + id);\n            var elPosition = el.getAttribute('position');\n            if (el != null) {\n                let d = Math.sqrt(((playerPosition.x - elPosition.x)*(playerPosition.x - elPosition.x))\n                    + ((playerPosition.z - elPosition.z)*(playerPosition.z - elPosition.z)));\n                let d2target = Math.sqrt(((targetPosition.x - elPosition.x)*(targetPosition.x - elPosition.x))\n                    + ((targetPosition.z - elPosition.z)*(targetPosition.z - elPosition.z)));\n                console.log(\"d: \" + d.toFixed(2));\n                if (Math.abs(d2target) < 3) {\n                    let newX = playerPosition.x - (((d + 1.5) * (playerPosition.x - elPosition.x)) / d);\n                    let newZ = playerPosition.z - (((d + 1.5) * (playerPosition.z - elPosition.z)) / d);\n                    var newPos = {\n                        x: newX,\n                        y: elPosition.y,\n                        z: newZ,\n                    };\n                    el.setAttribute('animation', 'property: position; to: ' + newPos.x + \" \" + newPos.y  + \" \" + newPos.z + \"; dur: 500\");\n                }\n            }\n        }\n    },\n\n    getMonstersWithinDistanceOfTarget( target, monsterIds, distance){\n        let targetPosition = target.getAttribute('position');\n        let nearbyMonsters = [];\n        for (let i = 0; i < monsterIds.length; i++) {\n            var id = monsterIds[i];\n            if (id == target.id) {\n                continue;\n            }\n            var el = document.querySelector('#' + id);\n            if (el == null){\n                continue;\n            }\n            var elPosition = el.getAttribute('position');\n            if (el != null && targetPosition != null && elPosition != null) {\n                let d2target = Math.sqrt(((targetPosition.x - elPosition.x)*(targetPosition.x - elPosition.x)) + ((targetPosition.z - elPosition.z)*(targetPosition.z - elPosition.z)));\n                console.log(\"distance \" + d2target);\n                if (Math.abs(d2target) <= distance) {\n                    nearbyMonsters.push(el);\n                }\n            }\n        }\n        return nearbyMonsters;\n    }\n});\n\n//# sourceURL=webpack:///./src/vroomba.js?");

/***/ })

/******/ });